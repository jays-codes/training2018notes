BUGFIX 1.1 branch

---------------------
Local Repos
	-> source repo
	- C:\jay\00_training\01_workspaces\training2018
	
	-> notes repo
	- C:\jay\00_training\00_studydocs\training2018notes
	
	-> archive/backup source repo
	- C:\jay\00_training\04_repository\git
		- \training2018

	-> archive/backup notes repo
	- C:\jay\00_training\04_repository\git
		- \training2018notes


-----
Remote Repos
	source
	- https://github.com/jays-codes/training2018
	
	notes
	- https://github.com/jays-codes/training2018notes.git
	
---------------------
Action flows
+ modify notes
	- modify and save in working area
	+ commit and push change
	+ update notes archive
	
+ update notes archives
	- goto notes archive
	- git pull

+ work on a bug or feature
	+ create branch for new feature or bugfix
	- work on branch
	+ commit and push
	+ merge to parent branch
	+ tag parent branch
	+ delete branch

+ resolveing a merge conflict
	- git mergetool
	- resolve conflict and save
	- git diff --cached <- compares cached version with repo ver 

+ temporarily save changes that you dont want to appear in your current branch
	+ stash

+ tagging a branch
	- git tag -s <tag>
	- git push --tags

+ commit and push change
	- git add
	- git commit
	- git push

+ add an alias
	- git config --global alias.<name> "<command> --<option1> --<optionN>"

-----------------------
Alias
+ lgoad -> log --graph --oneline --all --decorate

-----------------------
commands

+ merge to parent branch (put changes in current branch to parent branch)
	- go to parent branch
	- git merge <branch where changes come from>
	- git push

+ stash
	- git stash
	- git stash pop <- applies latest stash
	- git stash list 
	- git stash drop
	- git stash branch <new branch> <- creates new branch and applies stash to that branch

+ create branch
	- git branch <branch name>
	+ push to remote
	+ checkout branch

+ push branch to remote 
	- git push <remote> <branch>

+ checkout branch
	- git checkout <branch name>

+ delete branch
	+ force local delete -> git branch -D <branch>
	+ remote delete -> git push -d <remote> <branch>

+ get all references where head has pointed
	+ git reflog

+ points branch head to specific sha1 reference
	+ git reflog <- to get the specific sha1
	+ git branch <branch> <sha1>
	+ git checkout <branch>

+ show where HEAD is pointing
	- git show HEAD

----------------------

creating a branch
- to work on a feature or a bug
